import random

def caesar_cipher(text, shift):
  result = ""
  for char in text:
      if char.isalpha():
          ascii_offset = ord('a') if char.islower() else ord('A')
          result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
      else:
          result += char
  return result

def monoalphabetic_cipher(text, key):
  alphabet = "abcdefghijklmnopqrstuvwxyz"
  encrypted_text = ""
  for char in text:
      if char.isalpha():
          is_upper = char.isupper()
          char = char.lower()
          index = alphabet.index(char)
          encrypted_char = key[index].upper() if is_upper else key[index]
          encrypted_text += encrypted_char
      else:
          encrypted_text += char
  return encrypted_text

def vigenere_cipher(text, key):
  encrypted_text = ""
  key = key * (len(text) // len(key)) + key[:len(text) % len(key)]
  for i in range(len(text)):
      char = text[i]
      if char.isalpha():
          is_upper = char.isupper()
          ascii_offset = ord('A') if is_upper else ord('a')
          shift = ord(key[i]) - ascii_offset
          encrypted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
          encrypted_text += encrypted_char.upper() if is_upper else encrypted_char
      else:
          encrypted_text += char
  return encrypted_text

def vernam_cipher(text):  
  def generate_key(plaintext_length):
    key = ''.join(
        random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
        for _ in range(plaintext_length))
    return key


  def encrypt(plaintext, key):
    ciphertext = ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(plaintext, key))
    return ciphertext


  def decrypt(ciphertext, key):
    decrypted_text = ''.join(
        chr(ord(c) ^ ord(k)) for c, k in zip(ciphertext, key))
    return decrypted_text

  plaintext_length = len(text)
  key = generate_key(plaintext_length)
  c = encrypt(text,key)
  d = decrypt(c,key)
  print("Encrypted text: ", c)
  print("Decrypted text: ", d)

def rail_fence_cipher(text, key):
  def encryptText(text, key):
    rail = [['\n' for i in range(len(text))] for j in range(key)]

    dir_down = False
    row, col = 0, 0

    for i in range(len(text)):
      if (row == 0) or (row == key - 1):
        dir_down = not dir_down

      rail[row][col] = text[i]
      col += 1

      if dir_down:
        row += 1
      else:
        row -= 1

    result = []
    for i in range(key):
      for j in range(len(text)):
        if rail[i][j] != '\n':
          result.append(rail[i][j])
    return ("".join(result))


  def decryptText(cipher, key):
    rail = [['\n' for i in range(len(cipher))] for j in range(key)]

    dir_down = None
    row, col = 0, 0

    for i in range(len(cipher)):
      if row == 0:
        dir_down = True
      if row == key - 1:
        dir_down = False

      rail[row][col] = '*'
      col += 1

      if dir_down:
        row += 1
      else:
        row -= 1

    index = 0
    for i in range(key):
      for j in range(len(cipher)):
        if ((rail[i][j] == '*') and (index < len(cipher))):
          rail[i][j] = cipher[index]
          index += 1

    result = []
    row, col = 0, 0
    for i in range(len(cipher)):
      if row == 0:
        dir_down = True
      if row == key - 1:
        dir_down = False

      if (rail[row][col] != '*'):
        result.append(rail[row][col])
        col += 1

      if dir_down:
        row += 1
      else:
        row -= 1
    return ("".join(result))

  print("Encrypted Text: ", encryptText(text, key))
  print("Decrypted Text: ", decryptText(encryptText(text, key), key))
  
while True:
  print("Select a Cipher:")
  print("1. Caesar Cipher")
  print("2. Monoalphabetic Cipher")
  print("3. Polyalphabetic (Vigenere) Cipher")
  print("4. Vernam Cipher")
  print("5. Rail Fence Cipher")
  print("6. Exit")
  choice = int(input("Enter your choice: "))

  if choice == 1:
      text = input("Enter the text: ")
      shift = int(input("Enter the shift value: "))
      encrypted_text = caesar_cipher(text, shift)
      print("Encrypted text:", encrypted_text)
  elif choice == 2:
      text = input("Enter the text: ")
      key = input("Enter the key: ")
      encrypted_text = monoalphabetic_cipher(text, key)
      print("Encrypted text:", encrypted_text)
  elif choice == 3:
      text = input("Enter the text: ")
      key = input("Enter the key: ")
      encrypted_text = vigenere_cipher(text, key)
      print("Encrypted text:", encrypted_text)
  elif choice == 4:
      text = input("Enter the text: ")
      vernam_cipher(text)
  elif choice == 5:
      text = input("Enter plain text:")
      rails = int(input("Enter no of rails:"))
      encrypted_text = rail_fence_cipher(text, rails)
  elif choice == 6:
      break
  else:
      print("Invalid choice. Please try again.")
