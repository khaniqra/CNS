def egcd(a, b):
	x,y, u,v = 0,1, 1,0
	while a != 0:
		q, r = b//a, b%a
		m, n = x-u*q, y-v*q
		b,a, x,y, u,v = a,r, u,v, m,n
	gcd = b
	return gcd, x, y

def modinv(a, m):
	gcd, x, y = egcd(a, m)
	if gcd != 1:
		return None # modular inverse does not exist
	else:
		return x % m


# returns the cipher text
def encryptText(text, key):
	'''
	C = (a*P + b) % 26
	'''
	return ''.join([ chr((( key[0]*(ord(t) - ord('A')) + key[1] ) % 26)
				+ ord('A')) for t in text.upper().replace(' ', '') ])


# affine cipher decryption function
# returns original text
def decryptText(cipher, key):
	'''
	P = (a^-1 * (C - b)) % 26
	'''
	return ''.join([ chr((( modinv(key[0], 26)*(ord(c) - ord('A') - key[1]))
					% 26) + ord('A')) for c in cipher ])


# Driver Code to test the above functions
def main():
	# declaring text and key
	text = input("Enter plain text: ")
	key = [17, 20]

	# calling encryption function
	c = encryptText(text, key)

	print('Encrypted Text: {}'.format( c ))

	# calling decryption function
	print('Decrypted Text: {}'.format
	( decryptText(c, key) ))


if __name__ == '__main__':
	main()
